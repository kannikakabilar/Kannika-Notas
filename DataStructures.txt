Data Structures

Primitive DS       - Predefined way of storing data (ex: int, char, float, double)
Non-Primitive DS   - It can store any set of values and even objects

  Linear DS        - elements stored sequentially
  Non-Linear DS    - elements connect to more than 1 elements (ie: trees, graphs)

  Static DS        - fixed size (ie: Arrays) 
  Dynamic DS       - can increase size as elements get inserted (ie: Linked List)


Arrays   -   indexing = O(1) but everything else O(n)

Sample Array Qs


___________________________________________


Linked Lists   -   inserting = O(1) but everything else O(n)

Sample Linked List Qs


___________________________________________

Stacks   -   used for evaluating math expr and recursive function calls

Sample Stack Qs


___________________________________________

Hash Table

  Terms
    - Hash function: input is key-value and the output is memory address/slot# of where the element will be stored
    - Collision => chaining: when 2 elements are directed to the same slot use linked list or trees to store the element at that address
    - Open Addressing: store all values within the hash table
      - Linear Probing: if hash(x) % S is full => (hash(x) + 1) % S

  Initializing HashMap and HashSet in Java

    import java.util.HashMap;
    import java.util.HashSet;

    HashMap<String, String> capitalCities = new HashMap<String, String>();
    capitalCities.put("USA", "Washington DC");
    String USCapital = capitalCities.get("USA");  // "Washington DC"

    for (String i : capitalCities.keySet()) {
        System.out.println(i);  // Print keys
    }

    for (String i : capitalCities.values()) {
        System.out.println(i);  // Print values
    }

    HashSet<String> cars = new HashSet<String>();
    cars.add("McLaren");
    cars.contains("McLaren"); // Returns True


Sample HashMap/HashSet Qs


___________________________________________


Trees

Sample Tree Implementations


___________________________________________


Graphs

Terms
  - order of a graph = # of vertices in graph
  - size of a graph = # of edges of a graph
  - null graph = 0 edges in graph (but may have vertices)
  - complete graph = has edges with all combination of vertices
  - adjacency matrix = nxn matrix where matrix[i][j] indicates an edge/edge_weight between vertex i and j
  - adjacency list = key-value table where there's 1 key for each vertex and a list with vertices that the key vertex connects to

___________________________________________












